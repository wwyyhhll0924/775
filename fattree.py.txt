# -*- coding: utf-8 -*-

from mininet.net import Mininet
from mininet.node import OVSSwitch, RemoteController
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.topo import Topo

class FatTreeTopo(Topo):
    def build(self):
        k = 4  # k=4 for this specific fat-tree topology
        numCore = (k // 2) ** 2
        numAggregation = k * k // 2
        numEdge = k * k // 2
        numHost = (k ** 3) // 4

        # Create switches
        core_switches = [self.addSwitch('core-S%s' % (i + 1)) for i in range(numCore)]
        agg_switches = [self.addSwitch('agg-S%s' % (i + 1)) for i in range(numAggregation)]
        edge_switches = [self.addSwitch('acc-S%s' % (i + 1)) for i in range(numEdge)]

        # Create hosts
        hosts = [self.addHost('h%s' % (i + 1)) for i in range(numHost)]

        # Link hosts to edge switches
        host_count = 0
        for edge_switch in edge_switches:
            for _ in range(2):  # 每个Edge Switch连接2个主机
                self.addLink(hosts[host_count], edge_switch, bw=12, delay='2ms')
                host_count += 1

        # Link edge switches to aggregation switches
        for i in range(numEdge):
            self.addLink(edge_switches[i], agg_switches[i // 2], bw=12, delay='2ms')
            self.addLink(edge_switches[i], agg_switches[(i // 2) + (numAggregation // 2)], bw=12, delay='2ms')

        # Link aggregation switches to core switches
        for i in range(numAggregation):
            for j in range(numCore):
                self.addLink(agg_switches[i], core_switches[j], bw=12, delay='2ms')

def create_fattree_topology():
    topo = FatTreeTopo()
    net = Mininet(topo=topo, switch=OVSSwitch, link=TCLink)
    net.addController('c0', controller=RemoteController)
    net.start()

    # 验证网络拓扑
    print("Nodes:", net.keys())
    print("Links:")
    for link in net.links:
        print(link)

    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    create_fattree_topology()
