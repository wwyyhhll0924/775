from mininet.net import Mininet
from mininet.node import OVSSwitch
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.topo import Topo

class CustomFatTreeTopo(Topo):
    def build(self, k=4):
        numCore = (k // 2) ** 2
        numAgg = k * (k // 2)
        numEdge = k * (k // 2)
        numHost = k * (k // 2) * (k // 2)

        core_switches = [self.addSwitch('core-S%s' % (i + 1)) for i in range(numCore)]
        agg_switches = [self.addSwitch('agg-S%s' % (i + 1)) for i in range(numAgg)]
        edge_switches = [self.addSwitch('edge-S%s' % (i + 1)) for i in range(numEdge)]
        hosts = [self.addHost('h%s' % (i + 1)) for i in range(numHost)]

        # Connect hosts to edge switches
        host_count = 0
        for edge_switch in edge_switches:
            for _ in range(2):
                self.addLink(hosts[host_count], edge_switch, bw=12, delay='2ms')
                host_count += 1

        # Connect edge switches to aggregation switches
        agg_count = 0
        for i in range(numEdge):
            self.addLink(edge_switches[i], agg_switches[agg_count], bw=12, delay='2ms')
            self.addLink(edge_switches[i], agg_switches[agg_count + 1], bw=12, delay='2ms')
            if (i + 1) % 2 == 0:
                agg_count += 2

        # Connect aggregation switches to core switches
        core_count = 0
        for i in range(numAgg):
            self.addLink(agg_switches[i], core_switches[core_count], bw=12, delay='2ms')
            self.addLink(agg_switches[i], core_switches[core_count + 1], bw=12, delay='2ms')
            if (i + 1) % (numAgg // 2) == 0:
                core_count += 2

topos = {'customfattreetopo': CustomFatTreeTopo}

def run_custom_fat_tree():
    topo = CustomFatTreeTopo(k=4)
    net = Mininet(topo=topo, switch=OVSSwitch, link=TCLink)
    net.start()
    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    run_custom_fat_tree()
