from mininet.net import Mininet
from mininet.node import OVSSwitch
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.topo import Topo

class CustomFatTreeTopo(Topo):
    def build(self, k=4):
        num_core_switches = (k // 2) ** 2
        num_agg_switches = k * (k // 2)
        num_edge_switches = k * (k // 2)
        num_hosts = k * (k // 2) * (k // 2)

        core_switches = [self.addSwitch('core-s%s' % (i + 1)) for i in range(num_core_switches)]
        agg_switches = [self.addSwitch('agg-s%s' % (i + 1)) for i in range(num_agg_switches)]
        edge_switches = [self.addSwitch('edge-s%s' % (i + 1)) for i in range(num_edge_switches)]

        for i in range(num_hosts):
            host = self.addHost('h%s' % (i + 1))
            self.addLink(host, edge_switches[i // 2], bw=12, delay='2ms')

        for i in range(num_edge_switches):
            self.addLink(edge_switches[i], agg_switches[i // (k // 2)], bw=12, delay='2ms')
            self.addLink(edge_switches[i], agg_switches[(i // (k // 2)) + (k // 2)], bw=12, delay='2ms')

        for i in range(num_agg_switches):
            self.addLink(agg_switches[i], core_switches[i % num_core_switches], bw=12, delay='2ms')
            self.addLink(agg_switches[i], core_switches[(i + num_core_switches // 2) % num_core_switches], bw=12, delay='2ms')

def run_custom_fat_tree():
    topo = CustomFatTreeTopo(k=4)
    net = Mininet(topo=topo, switch=OVSSwitch, link=TCLink)
    net.start()
    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    run_custom_fat_tree()
